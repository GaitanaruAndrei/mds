

-------------------
Create or replace trigger trig1
  before update or insert on expusa
 begin
if(to_char(sysdate) > to_char(expusa.data_inceput+expusa.nr_zile))
   if inserting then
      raise_application_error(-20001,'Iserare nepermisa');
   else
      raise_application_error(-20003,'updatare interzisa');
   end if;
 end if;
end;
/
update expusa
  set nr_zile  = : nr_zile1;

delete from exusa
where nr_zile =: 22;

insert into expusa values ( .., .. );

------------------------------------



DECLARE
test VARCHAR(20) ;
cacat exception;
PROCEDURE macac(orasel VARCHAR2) IS 

BEGIN 
DECLARE numebun VARCHAR2(20);
   CURSOR c1
   IS
     SELECT a.nume
     FROM artist a,expozitie e
     where e.oras = orasel;
   
    BEGIN


   OPEN c1;

  LOOP 
   
   FETCH c1 into numebun; 
   if numebun is null then raise cacat  ;
      EXIT WHEN c1%notfound; 
     
         
      dbms_output.put_line(numebun);  end if;
   END LOOP; 
   CLOSE c1;
   EXCEPTION
    WHEN cacat THEN 
      dbms_output.put_line('Nu exista un artist!'); 
    WHEN others THEN 
      dbms_output.put_line('Error!');  
     
END;   
END;
BEGIN 
   test:='Bucuresti'; 
   
   macac(test); 
   
END; 
wget http://blog.stackexchange.com/ -UseBasicParsing -OutFile out.html

DEFINE p_cod_sal = 200
DEFINE p_cod_dept = 80
DEFINE p_procent = 20
DECLARE
-- atribuire :=
v_cod_sal emp_CAO.employee_id%TYPE:= &p_cod_sal;
v_cod_dept emp_CAO.department_id%TYPE:= &p_cod_dept;
v_procent NUMBER(8):=&p_procent;
BEGIN
UPDATE emp_CAO
SET department_id = v_cod_dept,
salary=salary + (salary* v_procent/100)
WHERE employee_id= v_cod_sal;
IF SQL%ROWCOUNT =0 THEN  --IMPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
DBMS_OUTPUT.PUT_LINE('Nu exista un angajat cu acest cod');
ELSE DBMS_OUTPUT.PUT_LINE('Actualizare realizata');
END IF;
END;


-----------------------------------------------------------CREATE TABLE
--CREARE TABEL --
create table zile_CAO(
    id Number(4),
    data Date,
    nume_zi Varchar2(20)
);

-----------------------------------------------------------LOOP
DECLARE
contor NUMBER(6) := 1;
v_data DATE;
maxim NUMBER(2) := LAST_DAY(SYSDATE)-SYSDATE;
BEGIN
LOOP
v_data := sysdate+contor;
INSERT INTO zile_CAO
VALUES (contor,v_data,to_char(v_data,'Day'));
contor := contor + 1;
EXIT WHEN contor > maxim;
END LOOP;
END;

----------------------------------------------------------- WHILE
DECLARE
contor NUMBER(6) := 1;
v_data DATE;
maxim NUMBER(2) := LAST_DAY(SYSDATE)-SYSDATE;
BEGIN
while contor <= maxim loop
v_data := sysdate+contor;
INSERT INTO zile_CAO
VALUES (contor,v_data,to_char(v_data,'Day'));
contor := contor + 1;
END LOOP;
END;
/
-----------------------------------------------------------GO TO
DECLARE
i POSITIVE:=1;
max_loop CONSTANT POSITIVE:=10;
BEGIN
LOOP
i:=i+1;
IF i>max_loop THEN
DBMS_OUTPUT.PUT_LINE('in loop i=' || i);
GOTO urmator;
END IF;
END LOOP;
<<urmator>>
i:=1;
DBMS_OUTPUT.PUT_LINE('dupa loop i=' || i);
END;
-----------------------------------------------------------RECORD // ca o clasa
--2 a)
DECLARE 
    TYPE emp_record IS RECORD 
    (cod employees.employee_id%TYPE, 
    salariu employees.salary%TYPE, 
    job employees.job_id%TYPE); 
    v_ang emp_record; 
BEGIN 
    v_ang.cod:=700; 
    v_ang.salariu:= 9000; 
    v_ang.job:='SA_MAN'; 
    DBMS_OUTPUT.PUT_LINE ('Angajatul cu codul '|| v_ang.cod || ' si jobul ' || v_ang.job || ' are salariul ' || v_ang.salariu);
END; 
----------------------------------------------------------- RETURNING
DECLARE 
    v_ang1 employees%ROWTYPE; 
    v_ang2 employees%ROWTYPE; 
BEGIN 
    DELETE FROM emp_CAO
    WHERE employee_id = 100 
    RETURNING employee_id, first_name, last_name, email, 
        phone_number, hire_date, job_id, salary, 
        commission_pct, manager_id, department_id 
        INTO v_ang1; -- inserez in tabel linia stearsa 
    INSERT INTO emp_CAO
        VALUES v_ang1; -- sterg angajat 101 
    DELETE FROM emp_CAO
        WHERE employee_id = 101;
    -- obtin datele din tabelul employees 
    SELECT * INTO v_ang2 
    FROM employees 
    WHERE employee_id = 101; 
    -- inserez o linie oarecare in emp_*** 
    INSERT INTO emp_CAO
        VALUES(1000,'FN','LN','E',null,sysdate, 'AD_VP',1000, null,100,90);
        -- modific linia adaugata anterior cu valorile variabilei v_ang2 
    -- se poate fol la update set row
    UPDATE emp_CAO SET ROW = v_ang2 
        WHERE employee_id = 1000; 
END;
----------------------------------------------------------- FOR

DECLARE 
    TYPE tablou_indexat IS TABLE OF NUMBER INDEX BY PLS_INTEGER; 
    t tablou_indexat; 
BEGIN 
-- punctul a 
    FOR i IN 1..10 LOOP 
        t(i):=i; 
    END LOOP; 
    DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
    FOR i IN t.FIRST..t.LAST LOOP 
        DBMS_OUTPUT.PUT(t(i) || ' '); 
    END LOOP; 
    DBMS_OUTPUT.NEW_LINE; 
-- punctul b 
    FOR i IN 1..10 LOOP 
        IF i mod 2 = 1 THEN 
            t(i):=null; 
        END IF; 
    END LOOP; 
    DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
    
    FOR i IN t.FIRST..t.LAST LOOP 
        DBMS_OUTPUT.PUT(nvl(t(i), 0) || ' '); 
    END LOOP; 
    DBMS_OUTPUT.NEW_LINE; 
-- punctul c 
    t.DELETE(t.first); 
    t.DELETE(5,7); 
    t.DELETE(t.last); 
    DBMS_OUTPUT.PUT_LINE('Primul element are indicele ' || t.first || ' si valoarea ' || nvl(t(t.first),0)); 
    DBMS_OUTPUT.PUT_LINE('Ultimul element are indicele ' || t.last || ' si valoarea ' || nvl(t(t.last),0)); 
    DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: '); 
    FOR i IN t.FIRST..t.LAST LOOP 
        IF t.EXISTS(i) THEN 
            DBMS_OUTPUT.PUT(nvl(t(i), 0)|| ' '); 
        END IF; 
    END LOOP; 
    DBMS_OUTPUT.NEW_LINE; 
-- punctul d 
    t.delete; 
    DBMS_OUTPUT.PUT_LINE('Tabloul are ' || t.COUNT ||' elemente.'); 
    END; 
/
-----------------------------------------------------------VECTORI

DECLARE
    TYPE vector IS VARRAY(2) OF NUMBER;
    t vector:= vector();
    BEGIN
-- punctul a
    FOR i IN 1..10 LOOP
        t.extend; 
        t(i):=i;
    END LOOP;
    DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
    FOR i IN t.FIRST..t.LAST LOOP
        DBMS_OUTPUT.PUT(t(i) || ' ');
    END LOOP;
    DBMS_OUTPUT.NEW_LINE;
-- punctul b
    FOR i IN 1..10 LOOP
        IF i mod 2 = 1 THEN 
            t(i):=null;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT('Tabloul are ' || t.COUNT ||' elemente: ');
    FOR i IN t.FIRST..t.LAST LOOP
        DBMS_OUTPUT.PUT(nvl(t(i), 0) || ' ');
    END LOOP;
    DBMS_OUTPUT.NEW_LINE;
-- punctul c
-- metodele DELETE(n), DELETE(m,n) nu sunt valabile pentru vectori!!!
-- din vectori nu se pot sterge elemente individuale!!!
-- punctul d
    t.delete;
    DBMS_OUTPUT.PUT_LINE('Tabloul are ' || t.COUNT ||' elemente.');
END;

-----------------------------------------------------------CREATE OR INSERT
CREATE OR REPLACE TYPE subordonati_CAO AS VARRAY(10) OF NUMBER(4);
/
CREATE TABLE manageri_CAO (cod_mgr NUMBER(10),
nume VARCHAR2(20),
lista subordonati_CAO);
DECLARE
v_sub subordonati_CAO:= subordonati_CAO(100,200,300);
v_lista manageri_CAO.lista%TYPE;
BEGIN
INSERT INTO manageri_CAO
VALUES (1, 'Mgr 1', v_sub);
INSERT INTO manageri_CAO
VALUES (2, 'Mgr 2', null);
INSERT INTO manageri_CAO
VALUES (3, 'Mgr 3', subordonati_CAO(400,500));
SELECT lista
INTO v_lista
FROM manageri_CAO
WHERE cod_mgr=1;
FOR j IN v_lista.FIRST..v_lista.LAST loop
DBMS_OUTPUT.PUT_LINE (v_lista(j));
END LOOP;
END;
/
SELECT * FROM manageri_CAO;

----------------------------------------------------------- NESTED
10. Crea?i tabelul emp_test_*** cu coloanele employee_id ?i last_name din tabelul employees. 
Ad?uga?i în acest tabel un nou câmp numit telefon de tip tablou imbricat. 
Acest tablou va men?ine pentru fiecare salariat toate numerele de telefon la care poate fi contactat. 
Insera?i o linie nou? în tabel. Actualiza?i o linie din tabel. Afi?a?i informa?iile din tabel. 
?terge?i tabelul ?i tipul.
*/

CREATE TABLE emp_test_CAO AS
SELECT employee_id, last_name FROM employees
WHERE ROWNUM <= 2;
CREATE OR REPLACE TYPE tip_telefon_CAO IS TABLE OF VARCHAR(12);
/
ALTER TABLE emp_test_CAO
ADD (telefon tip_telefon_CAO)
NESTED TABLE telefon STORE AS tabel_telefon_CAO;
INSERT INTO emp_test_CAO
VALUES (500, 'XYZ',tip_telefon_CAO('074XXX', '0213XXX', '037XXX'));
UPDATE emp_test_CAO
SET telefon = tip_telefon_CAO('073XXX', '0214XXX')
WHERE employee_id=100;
-- b.* ins ca selectam tot din tabela a.telefon
SELECT a.employee_id, b.*
FROM emp_test_CAO a, TABLE (a.telefon) b;
DROP TABLE emp_test_CAO;
DROP TYPE tip_telefon_CAO;
----------------------------------------------------------- PROCEDURA CU RECORD

 
    DECLARE 
   type books is record 
      (title  varchar(50), 
      author  varchar(50), 
      subject varchar(100), 
      book_id   number); 
   book1 books; 
   book2 books;  
PROCEDURE printbook (book books) IS 
BEGIN 
   dbms_output.put_line ('Book  title :  ' || book.title); 
   dbms_output.put_line('Book  author : ' || book.author); 
   dbms_output.put_line( 'Book  subject : ' || book.subject); 
   dbms_output.put_line( 'Book book_id : ' || book.book_id); 
END; 
   
BEGIN 
   -- Book 1 specification 
   book1.title  := 'C Programming'; 
   book1.author := 'Nuha Ali ';  
   book1.subject := 'C Programming Tutorial'; 
   book1.book_id := 6495407;
   
   -- Book 2 specification 
   book2.title := 'Telecom Billing'; 
   book2.author := 'Zara Ali'; 
   book2.subject := 'Telecom Billing Tutorial'; 
   book2.book_id := 6495700;  
   
   -- Use procedure to print book info 
   printbook(book1); 
   printbook(book2); 
END; 

-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
